// <auto-generated />
using System;
using EDennis.NetStandard.Base;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EDennis.AspNetIdentityServer.Data.Migrations.DomainIdentity
{
    [DbContext(typeof(DomainIdentityDbContext))]
    partial class DomainIdentityDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("Relational:Sequence:.seqAspNetRoleClaims", "'seqAspNetRoleClaims', '', '1', '1', '', '', 'Int32', 'False'")
                .HasAnnotation("Relational:Sequence:.seqAspNetRoles", "'seqAspNetRoles', '', '1', '1', '', '', 'Int32', 'False'")
                .HasAnnotation("Relational:Sequence:.seqAspNetUserClaims", "'seqAspNetUserClaims', '', '1', '1', '', '', 'Int32', 'False'")
                .HasAnnotation("Relational:Sequence:.seqAspNetUsers", "'seqAspNetUsers', '', '1', '1', '', '', 'Int32', 'False'")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EDennis.NetStandard.Base.DomainApplication", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("varchar(128)")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.HasKey("Name");

                    b.ToTable("AspNetApplications");

                    b.HasData(
                        new
                        {
                            Name = "DataGenie"
                        },
                        new
                        {
                            Name = "InfoMaster"
                        });
                });

            modelBuilder.Entity("EDennis.NetStandard.Base.DomainApplicationClaim", b =>
                {
                    b.Property<string>("Application")
                        .HasColumnType("varchar(128)")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<string>("ClaimType")
                        .HasColumnType("varchar(128)")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<string>("ClaimValue")
                        .HasColumnType("varchar(128)")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<bool>("OrgAdminable")
                        .HasColumnType("bit");

                    b.HasKey("Application", "ClaimType", "ClaimValue");

                    b.ToTable("AspNetApplicationClaims");

                    b.HasData(
                        new
                        {
                            Application = "DataGenie",
                            ClaimType = "app:role",
                            ClaimValue = "admin",
                            OrgAdminable = true
                        },
                        new
                        {
                            Application = "DataGenie",
                            ClaimType = "app:role",
                            ClaimValue = "user",
                            OrgAdminable = true
                        },
                        new
                        {
                            Application = "InfoMaster",
                            ClaimType = "app:role",
                            ClaimValue = "admin",
                            OrgAdminable = true
                        },
                        new
                        {
                            Application = "InfoMaster",
                            ClaimType = "app:role",
                            ClaimValue = "readonly",
                            OrgAdminable = true
                        },
                        new
                        {
                            Application = "InfoMaster",
                            ClaimType = "app:role",
                            ClaimValue = "auditor",
                            OrgAdminable = false
                        });
                });

            modelBuilder.Entity("EDennis.NetStandard.Base.DomainOrganization", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("varchar(128)")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.HasKey("Name");

                    b.ToTable("AspNetOrganizations");

                    b.HasData(
                        new
                        {
                            Name = "McDougall's"
                        },
                        new
                        {
                            Name = "Burger Squire"
                        },
                        new
                        {
                            Name = "Windy's"
                        });
                });

            modelBuilder.Entity("EDennis.NetStandard.Base.DomainOrganizationApplication", b =>
                {
                    b.Property<string>("Organization")
                        .HasColumnType("varchar(128)")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<string>("Application")
                        .HasColumnType("varchar(128)")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.HasKey("Organization", "Application");

                    b.ToTable("AspNetOrganizationApplications");

                    b.HasData(
                        new
                        {
                            Organization = "McDougall's",
                            Application = "DataGenie"
                        },
                        new
                        {
                            Organization = "Burger Squire",
                            Application = "DataGenie"
                        },
                        new
                        {
                            Organization = "Burger Squire",
                            Application = "InfoMaster"
                        },
                        new
                        {
                            Organization = "Windy's",
                            Application = "InfoMaster"
                        });
                });

            modelBuilder.Entity("EDennis.NetStandard.Base.DomainUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("NEXT VALUE FOR seqAspNetUsers");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutBegin")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("Organization")
                        .HasColumnType("varchar(128)")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<bool>("OrganizationAdmin")
                        .HasColumnType("bit");

                    b.Property<bool>("OrganizationConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4c89a4a5-53ed-4e69-b9d6-ec192198e8ff",
                            Email = "moe@mcdougalls.com",
                            EmailConfirmed = true,
                            NormalizedEmail = "MOE@MCDOUGALLS.COM",
                            NormalizedUserName = "MOE@MCDOUGALLS.COM",
                            Organization = "McDougall's",
                            OrganizationAdmin = true,
                            OrganizationConfirmed = false,
                            PasswordHash = "AA9h108SlVBssRSc+Dqntg7bZiwt6AQPEsxZOhY7pcUGDy3v4fRsEDEVhNJk4rr43A==",
                            PhoneNumber = "000-111-2222",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e390994a-b411-44de-a3a7-d59bfbb9cf5a",
                            TwoFactorEnabled = false,
                            UserName = "moe@mcdougalls.com"
                        },
                        new
                        {
                            Id = -2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "22a140fa-b110-42fc-b9d8-e6dcbc3ea43f",
                            Email = "larry@burgersquire.com",
                            EmailConfirmed = true,
                            NormalizedEmail = "LARRY@BURGERSQUIRE.COM",
                            NormalizedUserName = "LARRY@BURGERSQUIRE.COM",
                            Organization = "Burger Squire",
                            OrganizationAdmin = true,
                            OrganizationConfirmed = false,
                            PasswordHash = "AH56YEMKGpGxvsomtHRDBmKQSu/NyD04OEJSY49Llq9PL+t2CHoWoMmqCrSvZBujig==",
                            PhoneNumber = "111-222-3333",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "0d748aed-63d4-431d-beec-e590e1f841e3",
                            TwoFactorEnabled = false,
                            UserName = "larry@burgersquire.com"
                        },
                        new
                        {
                            Id = -3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4414f7aa-27f3-4cc0-a033-177009989968",
                            Email = "curly@windys.com",
                            EmailConfirmed = true,
                            NormalizedEmail = "CURLY@WINDYS.COM",
                            NormalizedUserName = "CURLY@WINDYS.COM",
                            Organization = "Windy's",
                            OrganizationAdmin = true,
                            OrganizationConfirmed = false,
                            PasswordHash = "AEsOfG0oSS+J7tUfteSOMknWfYoZv29wZv6Fzo3BEDBBnwHHLJDP4SA82+dw28HrIA==",
                            PhoneNumber = "222-333-4444",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8013a9af-6639-4a98-bf12-f6e442e898c6",
                            TwoFactorEnabled = false,
                            UserName = "curly@windys.com"
                        },
                        new
                        {
                            Id = -4,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6f72b5b1-b143-4168-885e-9aa0857b7482",
                            Email = "marcia@mcdougalls.com",
                            EmailConfirmed = true,
                            NormalizedEmail = "MARCIA@MCDOUGALLS.COM",
                            NormalizedUserName = "MARCIA@MCDOUGALLS.COM",
                            Organization = "McDougall's",
                            OrganizationAdmin = false,
                            OrganizationConfirmed = false,
                            PasswordHash = "AKJy5CVEFbEto2XHI6Nv07QMsOWaKMYOuNuLo5k5l8yG6HmFFyqJ+GexdR38ErrpoQ==",
                            PhoneNumber = "000-111-2223",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1b6fba77-42f4-4585-b8c7-2689a672d97e",
                            TwoFactorEnabled = false,
                            UserName = "marcia@mcdougalls.com"
                        },
                        new
                        {
                            Id = -5,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0759e9c5-237c-4e8a-be87-dc84d077d3c1",
                            Email = "jan@burgersquire.com",
                            EmailConfirmed = true,
                            NormalizedEmail = "JAN@BURGERSQUIRE.COM",
                            NormalizedUserName = "JAN@BURGERSQUIRE.COM",
                            Organization = "Burger Squire",
                            OrganizationAdmin = false,
                            OrganizationConfirmed = false,
                            PasswordHash = "AOKFZ/0fs5ZlFlgBcdRs0/GAtr54YIc9X8zv6YMez9UIR7DtVZW608tRa4j/LU8t8w==",
                            PhoneNumber = "111-222-3334",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "73bc5052-a491-4eef-833e-e5cef8e7f2d9",
                            TwoFactorEnabled = false,
                            UserName = "jan@burgersquire.com"
                        },
                        new
                        {
                            Id = -6,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6aa8809e-9ecb-40bb-a7c8-99ea2a3c6ac9",
                            Email = "cindy@windys.com",
                            EmailConfirmed = true,
                            NormalizedEmail = "CINDY@WINDYS.COM",
                            NormalizedUserName = "CINDY@WINDYS.COM",
                            Organization = "Windy's",
                            OrganizationAdmin = false,
                            OrganizationConfirmed = false,
                            PasswordHash = "AFexRbApNOVdhRaK/fRolsFxeRkw1boJ9/QUqhkeIX54brYEp+IvuV05ssGkdqs8Dg==",
                            PhoneNumber = "222-333-4445",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "60303360-ff3b-4d79-b560-a0ca49900067",
                            TwoFactorEnabled = false,
                            UserName = "cindy@windys.com"
                        },
                        new
                        {
                            Id = -7,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5a6fdbb9-e7cc-4808-9bb0-57e602bc148e",
                            Email = "greg@mcdougalls.com",
                            EmailConfirmed = true,
                            NormalizedEmail = "GREG@MCDOUGALLS.COM",
                            NormalizedUserName = "GREG@MCDOUGALLS.COM",
                            Organization = "McDougall's",
                            OrganizationAdmin = false,
                            OrganizationConfirmed = false,
                            PasswordHash = "AOs5pcwsec1Fr0ctoOa4zGGDYJcWJxd1DwEvbsEHwyYm+/dxgxbxsaE8EwsdErS+pQ==",
                            PhoneNumber = "000-111-2224",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "502a028d-947b-4501-bf53-14e591a29bb3",
                            TwoFactorEnabled = false,
                            UserName = "greg@mcdougalls.com"
                        },
                        new
                        {
                            Id = -8,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1d494787-9bd6-4018-be6c-c88398708cd0",
                            Email = "peter@burgersquire.com",
                            EmailConfirmed = true,
                            NormalizedEmail = "PETER@BURGERSQUIRE.COM",
                            NormalizedUserName = "PETER@BURGERSQUIRE.COM",
                            Organization = "Burger Squire",
                            OrganizationAdmin = false,
                            OrganizationConfirmed = false,
                            PasswordHash = "AOVUIcfSFifkaIYM25VzeT5lI6Ra2HlVMzdYNCIaB8Hkxjs8vO5N+m/N4A6YrjyvGw==",
                            PhoneNumber = "111-222-3335",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "5401e644-4b04-46d2-ab38-ce99ab05fe48",
                            TwoFactorEnabled = false,
                            UserName = "peter@burgersquire.com"
                        },
                        new
                        {
                            Id = -9,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2c4ca8aa-bf3e-44f2-995a-57ff1f4ad291",
                            Email = "bobby@windys.com",
                            EmailConfirmed = true,
                            LockoutBegin = new DateTimeOffset(new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, -5, 0, 0, 0)),
                            LockoutEnd = new DateTimeOffset(new DateTime(2030, 12, 13, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, -5, 0, 0, 0)),
                            NormalizedEmail = "BOBBY@WINDYS.COM",
                            NormalizedUserName = "BOBBY@WINDYS.COM",
                            Organization = "Windy's",
                            OrganizationAdmin = false,
                            OrganizationConfirmed = false,
                            PasswordHash = "ALLUTZJjhrofh2bxvJMxX5wr844YB2A1TpRrFsInH/sqtoI4KeXCdOloxmmO2aXTQw==",
                            PhoneNumber = "222-333-4446",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f9b2716a-bb24-445e-b333-420f88001e35",
                            TwoFactorEnabled = false,
                            UserName = "bobby@windys.com"
                        },
                        new
                        {
                            Id = -10,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ca9342ca-50a3-41fc-a867-300abe024ff6",
                            Email = "alice@windys.com",
                            EmailConfirmed = true,
                            NormalizedEmail = "ALICE@WINDYS.COM",
                            NormalizedUserName = "ALICE@WINDYS.COM",
                            Organization = "Windy's",
                            OrganizationAdmin = false,
                            OrganizationConfirmed = false,
                            PasswordHash = "AHfTD2iqsjzwV3zBRIwUFCg27J/9L391ShpGQMQD/sJnVf+62mhAJgZaHDDIdtggzw==",
                            PhoneNumber = "222-333-4446",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cce2a95d-ceb9-4451-864b-8311e4144c10",
                            TwoFactorEnabled = false,
                            UserName = "alice@windys.com"
                        },
                        new
                        {
                            Id = -11,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "94e81422-7d0a-447e-9c76-e2b8ab7d7413",
                            Email = "sheldon@burgersquire.com",
                            EmailConfirmed = true,
                            NormalizedEmail = "SHELDON@BURGERSQUIRE.COM",
                            NormalizedUserName = "SHELDON@BURGERSQUIRE.COM",
                            Organization = "Burger Squire",
                            OrganizationAdmin = false,
                            OrganizationConfirmed = false,
                            PasswordHash = "ALQmLyWUPXDt1DZ1Xtp3feAosNKQKe6WUqalvcsVN7WrcHtCmrB5MZCylLlo/KZBWg==",
                            PhoneNumber = "999-888-7777",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a7d1aaec-0d39-4dbe-8804-1e97d52b0374",
                            TwoFactorEnabled = false,
                            UserName = "sheldon@burgersquire.com"
                        });
                });

            modelBuilder.Entity("EDennis.NetStandard.Base.DomainUserHistory", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateReplaced")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutBegin")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Organization")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<bool>("OrganizationAdmin")
                        .HasColumnType("bit");

                    b.Property<bool>("OrganizationConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ReplacedBy")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("UserClaims")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id", "DateReplaced");

                    b.ToTable("AspNetUsersHistory");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("NEXT VALUE FOR seqAspNetRoles");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("NEXT VALUE FOR seqAspNetRoleClaims");

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("NEXT VALUE FOR seqAspNetUserClaims");

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");

                    b.HasData(
                        new
                        {
                            Id = -9902,
                            ClaimType = "app:role",
                            ClaimValue = "DataGenie:admin",
                            UserId = -1
                        },
                        new
                        {
                            Id = -9904,
                            ClaimType = "app:role",
                            ClaimValue = "DataGenie:admin",
                            UserId = -2
                        },
                        new
                        {
                            Id = -9905,
                            ClaimType = "app:role",
                            ClaimValue = "InfoMaster:admin",
                            UserId = -2
                        },
                        new
                        {
                            Id = -9907,
                            ClaimType = "app:role",
                            ClaimValue = "InfoMaster:admin",
                            UserId = -3
                        },
                        new
                        {
                            Id = -9908,
                            ClaimType = "app:role",
                            ClaimValue = "DataGenie:user",
                            UserId = -4
                        },
                        new
                        {
                            Id = -9909,
                            ClaimType = "app:role",
                            ClaimValue = "DataGenie:user",
                            UserId = -5
                        },
                        new
                        {
                            Id = -9910,
                            ClaimType = "app:role",
                            ClaimValue = "InfoMaster:readonly",
                            UserId = -5
                        },
                        new
                        {
                            Id = -9911,
                            ClaimType = "app:role",
                            ClaimValue = "InfoMaster:readonly",
                            UserId = -6
                        },
                        new
                        {
                            Id = -9912,
                            ClaimType = "app:role",
                            ClaimValue = "DataGenie:user",
                            UserId = -7
                        },
                        new
                        {
                            Id = -9913,
                            ClaimType = "app:role",
                            ClaimValue = "DataGenie:user",
                            UserId = -8
                        },
                        new
                        {
                            Id = -9914,
                            ClaimType = "app:role",
                            ClaimValue = "InfoMaster:readonly",
                            UserId = -8
                        },
                        new
                        {
                            Id = -9915,
                            ClaimType = "app:role",
                            ClaimValue = "InfoMaster:readonly",
                            UserId = -9
                        },
                        new
                        {
                            Id = -9916,
                            ClaimType = "app:role",
                            ClaimValue = "InfoMaster:auditor",
                            UserId = -10
                        },
                        new
                        {
                            Id = -9917,
                            ClaimType = "*:role",
                            ClaimValue = "*:admin",
                            UserId = -11
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("EDennis.NetStandard.Base.DomainUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("EDennis.NetStandard.Base.DomainUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EDennis.NetStandard.Base.DomainUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("EDennis.NetStandard.Base.DomainUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
